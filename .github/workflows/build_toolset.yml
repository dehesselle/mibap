# SPDX-FileCopyrightText: 2021 Ren√© de Hesselle <dehesselle@web.de>
#
# SPDX-License-Identifier: GPL-2.0-or-later

name: build_toolset
on:
  workflow_call:
    inputs:
      SDK_DOWNLOAD_URL_REQUIRED:
        description: "If set to true, break the build on missing SDK_DOWNLOAD_URL."
        default: false
        required: false
        type: boolean
      WRK_DIR:
        description: "Location of our work directory."
        default: /Users/Shared/work
        required: false
        type: string
      CCACHE_DIR:
        description: "Location of our ccache directory."
        default: /Users/Shared/work/ccache
        required: false
        type: string
    secrets:
      SDK_DOWNLOAD_URL:
        required: false
jobs:

  ##############################################################################

  build_toolset:
    runs-on: macos-10.15
    env:
      WRK_DIR: /Users/Shared/work
      CCACHE_DIR: /Users/Shared/work/ccache
    steps:

      #------------------------------------------------- prepare the environemnt

      - name: checkout mibap repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: create cache id
        id: cache_id
        uses: nanzm/get-time-action@v1.1
        with:
          format: "YYYY-MM-DD-HH-mm-ss"

      # Create a new cache, building ontop the most recent old one.
      - name: setup cache
        id: cache
        uses: actions/cache@v3
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-toolset-${{ steps.cache_id.outputs.time }}
          restore-keys: ccache-toolset-

      # GitHub does not provide 10.13 SDK on their runners and no image older
      # than Catalina. See here for what you can expect in their Catalina image:
      # https://github.com/actions/virtual-environments/blob/main/images/macos/macos-10.15-Readme.md
      #
      # Official downloads from Apple are not accessible without a developer
      # account and I don't trust 3rd party sources (e.g. "phracker"). So I'm
      # using my own (non-public) source, but I'm providing the means to verify
      # what I'm doing, see here:
      # https://github.com/dehesselle/sdkchecksum
      #
      # In order to use your custom SDK_DOWNLOAD_URL, create a repository secret
      # of said name and proivide a link to a .tar.xz file.
      # At the moment, only 10.13.4 SDK is supported (hardcoded below).
      - name: install macOS SDK
        if: env.SDK_DOWNLOAD_URL != null
        env:
          SDK_DOWNLOAD_URL: ${{ secrets.SDK_DOWNLOAD_URL }}
        run: |
          mkdir -p $WRK_DIR
          curl -L ${{ secrets.SDK_DOWNLOAD_URL }} | tar -C $WRK_DIR -xJp
          echo "SDKROOT=$WRK_DIR/$(basename ${SDK_DOWNLOAD_URL%%.tar.xz*})" >> $GITHUB_ENV

      # Checkout repository to verify SDK...
      - name: checkout sdkchecksum repository
        if: env.SDK_DOWNLOAD_URL != null
        env:
          SDK_DOWNLOAD_URL: ${{ secrets.SDK_DOWNLOAD_URL }}
        uses: actions/checkout@v3
        with:
          repository: dehesselle/sdkchecksum
          path: sdkchecksum
          clean: false

      # ...and use it to verify
      - name: verify SDK
        if: env.SDK_DOWNLOAD_URL != null
        env:
          SDK_DOWNLOAD_URL: ${{ secrets.SDK_DOWNLOAD_URL }}
        run: |
          shasum -a 256 sdkchecksum/MacOSX10.13.4.sdk.sha256
          cd $WRK_DIR
          if shasum -s -c $GITHUB_WORKSPACE/sdkchecksum/MacOSX10.13.4.sdk.sha256; then
            echo "ok - SDK verified"
            exit 0
          else
            echo "error - SDK verification failed"
            exit 1
          fi

      # GitHub does not provide a clean macOS installation. We need to move the
      # pre-installed components out of the way so we don't pick them up by
      # accident.
      - name: disable /usr/local
        run: |
          cd /usr/local
          for dir in include lib share; do sudo mv $dir $dir.disabled; done

      #----------------------------------------------------------- build toolset

      - name: bootstrap JHBuild
        run: ./110-bootstrap_jhb.sh

      - name: build GTK 3 stack
        run: ./120-build_gtk3.sh

      - name: build Inkscape dependencies
        run: ./130-build_inkdeps.sh

      - name: install additional components
        run: ./140-build_other.sh

      #---------------------------------------------------------------- artifact

      - name: remove non-essential files
        run: |
          source jhb/etc/jhb.conf.sh
          find "$SRC_DIR" -mindepth 1 -maxdepth 1 -type d ! -name 'bash_d' ! -name 'gtk-mac-bundler*' ! -name 'jhb*' ! -name 'png2icns*' -exec rm -rf {} \;
          rm -rf "${BLD_DIR:?}"/*
          rm -rf "${TMP_DIR:?}"/*

      - name: create toolset dmg
        id: toolset
        run: |
          jhb/usr/bin/archive create_dmg
          source jhb/etc/jhb.conf.sh
          echo "::set-output name=dmg::$RELEASE_ARCHIVE"

      # Restore /usr/local, GitHub actions depend on these.
      - name: restore /usr/local
        run: for dir in /usr/local/*.disabled; do sudo mv $dir ${dir/.disabled/}; done

      - name: upload toolset disk image
        uses: actions/upload-artifact@v3
        with:
          name: Inkscape_build_toolset
          path: ${{ steps.toolset.outputs.dmg }}

      - name: upload toolset checksum
        uses: actions/upload-artifact@v3
        with:
          name: Inkscape_build_toolset.sha256
          path: ${{ steps.toolset.outputs.dmg }}.sha256

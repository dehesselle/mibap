# SPDX-FileCopyrightText: 2021 Ren√© de Hesselle <dehesselle@web.de>
#
# SPDX-License-Identifier: GPL-2.0-or-later

name: dependencies
on:
  workflow_call:
    inputs:
      SDK_DOWNLOAD_URL_REQUIRED:
        description: "If set to true, break the build on missing SDK_DOWNLOAD_URL."
        default: false
        required: false
        type: boolean
      WRK_DIR:
        description: "Location of our work directory."
        default: /Users/Shared/work
        required: false
        type: string
      CCACHE_DIR:
        description: "Location of our ccache directory."
        default: /Users/Shared/work/ccache
        required: false
        type: string
    secrets:
      SDK_DOWNLOAD_URL:
        required: false
jobs:

  ##############################################################################

  build:
    runs-on: macos-12
    env:
      WRK_DIR: ${{ inputs.WRK_DIR }}
      CCACHE_DIR: ${{ inputs.CCACHE_DIR }}
    steps:

      #------------------------------------------------- prepare the environment

      - name: Checkout mibap repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Create timestamp
        id: timestamp
        uses: josStorer/get-current-time@v2
        with:
          format: "YYYY-MM-DD-HH-mm-ss"

      # Create a new cache, building ontop the most recent old one.
      - name: Set up cache
        uses: actions/cache@v3
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-dependencies-${{ steps.timestamp.outputs.formattedTime }}
          restore-keys: ccache-dependencies-

      # Install a macOS SDK to target a minimum OS version if SDK_DOWNLOAD_URL
      # has been provided, otherwise whatever SDK is the runner's default one
      # is being used.
      #
      # Official downloads from Apple are not accessible without a developer
      # account and I don't trust 3rd party sources (e.g. "phracker"). So I'm
      # using my own (non-public) source, but I'm providing the means to verify
      # its genuinity, see here:
      # https://github.com/dehesselle/sdkchecksum
      #
      # In order to use your own SDK_DOWNLOAD_URL, create a repository secret
      # of said name and provide a link to a .tar.xz file.

      - name: Install macOS SDK
        if: env.SDK_DOWNLOAD_URL != null
        env:
          SDK_DOWNLOAD_URL: ${{ secrets.SDK_DOWNLOAD_URL }}
        run: |
          mkdir -p $WRK_DIR
          curl --http1.1 -L ${{ secrets.SDK_DOWNLOAD_URL }} | tar -C $WRK_DIR -xJp
          echo "SDKROOT=$WRK_DIR/$(basename ${SDK_DOWNLOAD_URL%%.tar.xz*})" >> $GITHUB_ENV

      - name: Verify macOS SDK
        if: env.SDK_DOWNLOAD_URL != null
        env:
          SDK_DOWNLOAD_URL: ${{ secrets.SDK_DOWNLOAD_URL }}
        uses: dehesselle/sdkchecksum@master
        with:
          SDKROOT: ${{ env.SDKROOT }}
          SHA256_FILE: MacOSX10.13.4.sdk.sha256

      # GitHub does not provide a clean macOS installation. We need to move the
      # pre-installed components out of the way so we don't pick them up by
      # accident.
      - name: Disable /usr/local
        run: |
          cd /usr/local
          for dir in include lib share; do sudo mv $dir $dir.disabled; done

      #---------------------------------------------- run the actual build steps

      - name: Bootstrap JHBuild
        run: ./110-bootstrap_jhb.sh

      - name: Build GTK 3 stack
        run: ./120-build_gtk3.sh

      # Save cache so we don't run into a timeout again after the job has
      # previously failed due to timeout.
      - name: Save cache
        uses: actions/cache/save@v3
        if: always()
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-dependencies-${{ steps.timestamp.outputs.formattedTime }}

      - name: Build Inkscape dependencies
        run: ./130-build_inkdeps.sh

      - name: Build packaging components
        run: ./140-build_packaging.sh

      #------------------------------------ package everything into a disk image

      - name: Remove non-essential files
        run: |
          source jhb/etc/jhb.conf.sh
          find "$SRC_DIR" -mindepth 1 -maxdepth 1 -type d ! -name 'bash_d' ! -name 'gtk-mac-bundler*' ! -name 'jhb*' -exec rm -rf {} \;
          rm -rf "${BLD_DIR:?}"/*
          rm -rf "${TMP_DIR:?}"/*

      - name: Create disk image
        run: jhb/usr/bin/archive create_dmg

      # Restore /usr/local, GitHub actions depend on these.
      - name: Restore /usr/local
        run: for dir in /usr/local/*.disabled; do sudo mv $dir ${dir/.disabled/}; done

      - name: Upload disk image
        uses: actions/upload-artifact@v3
        with:
          name: dependencies
          path: mibap*.dmg
